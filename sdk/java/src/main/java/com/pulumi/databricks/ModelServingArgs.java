// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.ModelServingConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelServingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelServingArgs Empty = new ModelServingArgs();

    /**
     * The model serving endpoint configuration.
     * 
     */
    @Import(name="config", required=true)
    private Output<ModelServingConfigArgs> config;

    /**
     * @return The model serving endpoint configuration.
     * 
     */
    public Output<ModelServingConfigArgs> config() {
        return this.config;
    }

    /**
     * The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the update name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the update name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ModelServingArgs() {}

    private ModelServingArgs(ModelServingArgs $) {
        this.config = $.config;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelServingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelServingArgs $;

        public Builder() {
            $ = new ModelServingArgs();
        }

        public Builder(ModelServingArgs defaults) {
            $ = new ModelServingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The model serving endpoint configuration.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<ModelServingConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The model serving endpoint configuration.
         * 
         * @return builder
         * 
         */
        public Builder config(ModelServingConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param name The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the update name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the update name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ModelServingArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            return $;
        }
    }

}
